grammar org.hanashiconlang.Hanashi hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate hanashi "http://www.hanashiconlang.org/Hanashi"

Document: {Document}
    (imports+=Import)*
	(parts+=Declaration)*
;
Import: "import" importedNamespace=(Name | TEXTSINGLE);

Language:
	"language" name=Name title=RichString
;
	
Declaration:
 	Article
|	Section
|   Lexicon
|	Taxon
|	Language
|	Syntax
;

MetaData:
	{MetaData}
	("author" author=RichStringOrName)?
	("created" created=RichStringOrName)?
	("modified" modified=RichStringOrName)?
	("version" version=RichStringOrName)?
;
HtmlData:
	{HtmlData}
	("class" class=RichStringOrName)?
	("refclass" refclass=RichStringOrName)?
;

RichStringOrName returns RichString:
    {RichString} expressions+=RichStringName
|   RichString
;
RichStringName:
    {RichStringLiteral} value=Name
;
RichString:
	{RichString} (
    expressions+=RichStringSingle
|   expressions+=RichStringLeft expressions+=RichStringPart
	(expressions+=RichStringMiddle expressions+=RichStringPart)* expressions+=RichStringRight
);
RichStringSingle:
	{RichStringLiteral} value=TEXTSINGLE
;
RichStringLeft:
	{RichStringLiteral} value=TEXTLEFT
;
RichStringMiddle:
	{RichStringLiteral} value=TEXTMIDDLE
;
RichStringRight:
	{RichStringLiteral} value=TEXTRIGHT
;
RichStringPart hidden(WS, ML_COMMENT, SL_COMMENT):
	=> "gl" Gloss
|	=> "table" Table
|	=> "fn" Footnote
|	=> "translated" Translated
|   {Call} function=RichStringOrName (arguments+=RichStringOrName)*
;

Translated:
	{Translated} (items+=TranslatedItem)*
;
TranslatedItem:
	language=[Language|Name] text=RichString
;

Footnote:
	{Footnote} (name=Name ":" text=RichStringOrName? | text=RichString | target=[Footnote|Name])
;

Table:
	{Table} (name=Name)? meta=MetaData html=HtmlData (rows+=TableRow)*
;
TableRow:
	{TableRow} "tr" (cols+=TableCol)*
;
TableCol:
	{TableCol} (header?="th" | "td") text=RichStringOrName (skips+=">")*
;

Gloss:
	{Gloss} (name=Name)? meta=MetaData html=HtmlData 
			lines+=GlossLine ("\\\\" lines+=GlossLine)* "\\\\"?
;
GlossLine hidden(ML_COMMENT, SL_COMMENT):
	language=[Language|Name] ":" WS* (words+=GlossWord (WS+ words+=GlossWord)*)? WS*
;
GlossWord:
	items+=GlossItem ("~"? items+=GlossItem)* 
	(skips+=GlossSkip)*
;
GlossItem:
	{GlossMorpheme} morpheme=[Morpheme|Name] (taxons+=TaxonRef)*
|	{GlossString} string=("," | "-" | "." | ":" | ";" | "(" | ")" | "[" | "]" | "/" | "?" | "!")
|	{GlossRichString} string=RichString
;
GlossSkip: {GlossSkip} ">";

Article:
	"article" name=Name (languages+=[Language|Name])+ title=RichString meta=MetaData html=HtmlData ":"
		(parts+=ArticlePart)*
	"end"
;
ArticlePart:
	{PartSection} "section" target=[Section|Name]
|	{PartTaxonomy} "taxonomy" target=[Taxon|Name]
|	{PartLexicon} "lexicon" target=[Lexicon|Name]
;

Section:
	"section" name=Name title=RichString (taxons+=TaxonRef)* meta=MetaData html=HtmlData ":"
	text=RichString?
	(parts+=Section)*
	"end"
;

Lexicon:
	"lexicon" name=Name language=[Language|Name] (taxons+=TaxonRef)* meta=MetaData html=HtmlData 
	("morphemerefclass" morphemerefclass=RichStringOrName)? ":"
	(morphemes+=Morpheme)*
	"end"
;
Morpheme:
	"morpheme" name=Name (taxons+=TaxonRef)* meta=MetaData html=HtmlData ":"
	(entries+=MorphemeEntry)*
;
MorphemeEntry:
	(type="form" | 
	 type=("gloss" | "translation" | "derived") language=[Language|Name])  
	(taxons+=TaxonRef)* html=HtmlData ":" text=RichString?
;

Syntax: {Syntax}
	"syntax" (name=Name)? language=[Language|Name] (taxons+=TaxonRef)* meta=MetaData html=HtmlData ":" (rules+=Rule)* "end"
;
Rule:
	name=Name html=HtmlData "=" production=Production ";"
;
Production:
	ChoiceProduction
;
ChoiceProduction:
	SeqProduction ({Choice.left=current} op=("+" | "-" | "*" | "&" | "|") right=SeqProduction)*
;
SeqProduction:
	{Sequence} seq+=SimpleProduction ( seq+=SimpleProduction)*
;
SimpleProduction:
	{NonTerminal} target=[Rule|Name]
|	{Terminal} text=RichString
|	{Weighted} '^' weight=RichString
|	"(" Production ")"
|	"[" {Optional} inner=Production "]"
|	"{" {Repeated} inner=Production "}"
;

Taxon:
	"taxon" name=ID (title=RichString)? meta=MetaData html=HtmlData ":" text=RichString? (taxons+=Taxon)* "end"
;
TaxonRef:
	"#" target=[Taxon|Name]
;

Name: ID | "syntax" | "taxon" | "taxonomy" | "form" | "gloss" | "translation" | "translated" | "derived" | 
      "morpheme" | "section" | "lexicon" | "morphemerefclass" | "gl" | "fn" |
      "author" | "created" | "modified" | "version" | "class" | "refclass" | 
      "language" | "import" | "article";


terminal fragment MLC_OTH      : !( '*' | '{' | '}' );
terminal fragment MLC_OTH_RP   : !( '*' | '{' );
terminal fragment MLC_LP_TOK   : '{'+ ( '*' MLC_BODY | MLC_OTH_RP );
terminal fragment MLC_X_TOK    : '*'+ ( MLC_OTH | MLC_LP_TOK );
terminal fragment MLC_BODY     : ( MLC_OTH_RP | MLC_LP_TOK | MLC_X_TOK )* '*'+ '}';
terminal ML_COMMENT            : '{*' MLC_BODY;
terminal SL_COMMENT : '#*' !('\n'|'\r')* ('\r'? '\n')?;
terminal TEXTSINGLE : '{' (!('{'|'}'))* '}';
terminal TEXTLEFT : '{' (!('{'|'}'))* '{';
terminal TEXTRIGHT : '}' (!('{'|'}'))* '}';
terminal TEXTMIDDLE : '}' (!('{'|'}'))* '{';
terminal fragment LETTER: 
    'a'..'z' | 'A'..'Z' | '\u00C0'..'\u00D6' | '\u00C8'..'\u00F6' | '\u00F8'..'\u1FFE' |
    '\u2E80'..'\u2FD5' | '\u3041'..'\u31FF';
terminal ID: (LETTER|'0'..'9'|'_'|'\'') (LETTER|'_'|'0'..'9'|'\''|'-')*;

terminal WS: (' '|'\t'|'\r'|'\n'|
              '\u00A0'|'\u1680'|'\u180E'|'\u2000'..'\u200B'|'\u202F'|
              '\u205F'|'\u3000'|'\uFEFF')+;

terminal ANY_OTHER: .;
	