grammar org.hanashiconlang.Hanashi hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate hanashi "http://www.hanashiconlang.org/Hanashi"

Document: {Document}
	(parts+=Declaration)*
;

Language:
	"language" name=ID title=RichString
;
	
Declaration:
	Section
|   Lexicon
|	Taxonomy
|	Language
|	Syntax
;

MetaData:
	{MetaData}
	("author" author=RichString)?
	("created" created=Date)?
	("modified" modified=Date)?
	("version" version=RichString)?
;
HtmlData:
	{HtmlData}
	("class" class=RichString)?
	("refclass" refclass=RichString)?
;
Date:	year=INT "/" month=INT "/" day=INT "-" 
		hour=INT ":" minute=INT ":" second=INT
;

RichString:
	{RichString} (
    expressions+=RichStringSingle
|   expressions+=RichStringLeft expressions+=RichStringPart
	(expressions+=RichStringMiddle expressions+=RichStringPart)* expressions+=RichStringRight
);
RichStringSingle:
	{RichStringLiteral} value=(TEXTSINGLE | ID)
;
RichStringLeft:
	{RichStringLiteral} value=TEXTLEFT
;
RichStringMiddle:
	{RichStringLiteral} value=TEXTMIDDLE
;
RichStringRight:
	{RichStringLiteral} value=TEXTRIGHT
;
RichStringPart:
	Gloss
;

Section:
	"section" (name=ID)? title=RichString (taxons+=TaxonRef)* meta=MetaData html=HtmlData ":"
	text=RichString?
	(parts+=Section)*
	"end"
;

Gloss:
	{Gloss} "GL" (name=ID)? meta=MetaData html=HtmlData 
			lines+=GlossLine ("\\\\" lines+=GlossLine)* "\\\\"?
;
GlossLine:
	language=[Language] ":" (words+=GlossWord)*
;
GlossWord:
	items+=GlossItem ("~" items+=GlossItem)* 
	(skips+=GlossSkip)*
;
GlossItem:
	{GlossMorpheme} morpheme=[Morpheme] (taxons+=TaxonRef)*
|	{GlossString} string=("," | "-" | "." | ":" | ";" | "(" | ")" | "/" | "?" | "!")
|	{GlossRichString} string=RichString
;
GlossSkip: {GlossSkip} ">";

Lexicon:
	"lexicon" (name=ID)? language=[Language] (taxons+=TaxonRef)* meta=MetaData html=HtmlData 
	("morphemerefclass" morphemerefclass=RichString)? ":"
	(morphemes+=Morpheme)*
	"end"
;
Morpheme:
	"morpheme" name=ID (taxons+=TaxonRef)* meta=MetaData html=HtmlData ":"
	(entries+=MorphemeEntry)*
;
MorphemeEntry:
	(type="form" | 
	 type=("gloss" | "translation" | "derived") language=[Language])  
	(taxons+=TaxonRef)* html=HtmlData ":" text=RichString?
;

Syntax: {Syntax}
	"syntax" (name=ID)? language=[Language] (taxons+=TaxonRef)* meta=MetaData html=HtmlData ":" (rules+=Rule)* "end"
;
Rule:
	name=ID html=HtmlData "=" production=Production
;
Production:
	ChoiceProduction
;
ChoiceProduction:
	SeqProduction ({Choice.left=current} op=("+" | "-" | "*" | "&" | "|") right=SeqProduction)*
;
SeqProduction:
	{Sequence} seq+=SimpleProduction ( seq+=SimpleProduction)*
;
SimpleProduction:
	{NonTerminal} target=[Rule]
|	{Terminal} text=RichString
|	{Weighted} weight=INT
|	"(" Production ")"
|	"[" {Optional} inner=Production "]"
|	"{" {Repeated} inner=Production "}"
;

Taxonomy:
	{Taxonomy} "taxonomy" (name=ID)? meta=MetaData html=HtmlData ":" (taxons+=Taxon)* "end"
;
Taxon:
	"taxon" name=ID (title=RichString)? meta=MetaData html=HtmlData ":" text=RichString? (taxons+=Taxon)* "end"
;
TaxonRef:
	"#" target=[Taxon]
;


terminal TEXTSINGLE : '"' ('\\' . | !('\\'|'$'|'"'))* '"';
terminal TEXTLEFT : '"' ('\\' . | !('\\'|'$'|'"'))* '$';
terminal TEXTRIGHT : '$' ('\\' . | !('\\'|'$'|'"'))* '"';
terminal TEXTMIDDLE : '$' ('\\' . | !('\\'|'$'|'"'))* '$';
terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'\''|'-')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
	